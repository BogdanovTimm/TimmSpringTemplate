package com.example.hibernatetest2.tables.onetoone.service;

import java.util.ArrayList;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.example.hibernatetest2.tables.manytomany.dto.Table4Dto;
import com.example.hibernatetest2.tables.manytomany.dto.mapper.Table4Mapper;
import com.example.hibernatetest2.tables.manytomany.entities.Table4;
import com.example.hibernatetest2.tables.manytomany.repositories.Table4Repository;
import com.example.hibernatetest2.tables.manytomany.repositories.Table4RepositoryCustomQueryDslImpl;
import com.example.hibernatetest2.tables.onetoone.dto.MasterTableDto;
import com.example.hibernatetest2.tables.onetoone.dto.mapper.MasterTableMapper;
import com.example.hibernatetest2.tables.onetoone.entities.MasterTable;
import com.example.hibernatetest2.tables.onetoone.entities.QMasterTable;
import com.example.hibernatetest2.tables.onetoone.repositories.MasterTableRepository;
import com.example.hibernatetest2.tables.onetoone.repositories.MasterTableRepositoryCustomQueryDslImpl;
import com.querydsl.core.types.ExpressionUtils;
import com.querydsl.core.types.Predicate;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class MasterTableService {

    private final MasterTableRepository table2Repository;

    private final MasterTableRepositoryCustomQueryDslImpl table2RepositoryCustom;

    private final MasterTableMapper table2Mapper;


    public Page<MasterTableDto> search(
                                       Integer pageNumber,
                                       Integer numberOfRowsInOnePage,
                                       String sortedBy,
                                       String searchPhrase) {
        var pageRequest = PageRequest.of(pageNumber,
                                         numberOfRowsInOnePage,
                                         Sort.by(Sort.Direction.DESC,
                                                 sortedBy));
        var listOfBooleanExpressions = new ArrayList<Predicate>(); //! You need QueryDsl dependency for this to work
        String[] arr = searchPhrase.split(" "); //! http://website.com/?searchPhrase=me+th parses internally as searchPhrase = "me th"
        for (String currentWord : arr) {
            listOfBooleanExpressions.add(QMasterTable.masterTable.name.containsIgnoreCase(currentWord)); //[ ] QTable1 is a class generated by QueryDsl. You need to change it to class that represents your table, like QMyTable
        }
        var predicate = ExpressionUtils.anyOf(listOfBooleanExpressions); //? Connects QueryDslPredicate1s with logivcanl OR
        return table2Repository.findAll(predicate, pageRequest).map(table2Mapper::masterTableToDto);
    }

    public MasterTableDto findById(Long id) {
        var optionalRowFromTable2 = table2Repository.findById(id);
        return table2Mapper.masterTableToDto(optionalRowFromTable2.get());
    }

    public MasterTableDto createNewRow(MasterTable creatingForm) {
        return table2Mapper.masterTableToDto(table2Repository.saveAndFlush(creatingForm));
    }

    public MasterTableDto changeRow(String newName, Long id) {
        var rowToChange = table2Repository.findById(id).get();
        rowToChange.setName(newName);
        return table2Mapper.masterTableToDto(table2Repository.saveAndFlush(rowToChange));
    }

    public int deleteRow(String name) {
        return table2Repository.deleteByName(name);
    }
}
