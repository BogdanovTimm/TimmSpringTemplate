package com.example.hibernatetest2.tables.onetomanytoone.resources;

import java.net.URI;
import java.util.ArrayList;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.hibernatetest2.tables.onetomanytoone.entities.QTable1;
import com.example.hibernatetest2.tables.onetomanytoone.entities.Table1;
import com.example.hibernatetest2.tables.onetomanytoone.repositories.Table1Repository;
import com.example.hibernatetest2.tables.onetomanytoone.repositories.Table1RepositoryCustomQueryDslImpl;
import com.querydsl.core.types.ExpressionUtils;
import com.querydsl.core.types.Predicate;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = "/api/v1/table1") // [ ] URL for this table
@RequiredArgsConstructor
public class Table1Resource {

    private final Table1Repository table1Repository;

    private final Table1RepositoryCustomQueryDslImpl table1RepositoryCustom;





    @GetMapping
    public ResponseEntity<Page<Table1>> search(
                                               @RequestParam(defaultValue = "0") //? this variable will be in the URL itself after ? (like http://website.com/bands?pageNumber=1)
                                               Integer pageNumber,
                                               @RequestParam(defaultValue = "2")
                                               Integer numberOfRowsInOnePage,
                                               @RequestParam(defaultValue = "id")
                                               String sortedBy,
                                               @RequestParam(defaultValue = "")
                                               String searchPhrase) {
        var pageRequest = PageRequest.of(pageNumber,
                                         numberOfRowsInOnePage,
                                         Sort.by(Sort.Direction.DESC, sortedBy));
        var listOfBooleanExpressions = new ArrayList<Predicate>(); //! You need QueryDsl dependency for this to work
        String[] arr = searchPhrase.split(" "); //! http://website.com/?searchPhrase=me+th parses internally as searchPhrase = "me th"
        for (String currentWord : arr) {
            listOfBooleanExpressions.add(QTable1.table1.name.containsIgnoreCase(currentWord));//[ ] QTable1 is a class generated by QueryDsl. You need to change it to class that represents your table, like QMyTable
        }
        var predicate = ExpressionUtils.anyOf(listOfBooleanExpressions); //? Connects QueryDslPredicate1s with logivcanl OR
        return ResponseEntity.ok()
                             .body(table1Repository.findAll(predicate, pageRequest));
    }



    @GetMapping("/{id}")
    public ResponseEntity<Table1> findById(
                                           @PathVariable("id")
                                           String id) {

        return ResponseEntity.ok()
                             .body(table1Repository.findById(Long.parseLong(id))
                                                   .get());
    }



    @PostMapping("/add")
    public ResponseEntity<String> createNewRow(
                                               @RequestBody
                                               //@Valid
                                               Table1 creatinForm) throws InterruptedException {
        table1Repository.saveAndFlush(creatinForm);
        return ResponseEntity.created(URI.create(ServletUriComponentsBuilder.fromCurrentContextPath()
                                                                            .path("/api/v1/table1/<name>")
                                                                            .toUriString()))
                             .body("New Row was sucesfully created");
    }



    @PutMapping("/{id}/change")
    public ResponseEntity<String> changeRow(
                                            @RequestBody
                                            String newName,
                                            @PathVariable("id")
                                            String id) throws InterruptedException {
        var rowToChange = table1Repository.findById(Long.parseLong(id)).get();
        rowToChange.setName(newName);
        table1Repository.saveAndFlush(rowToChange);
        return ResponseEntity.ok()
                             .body("Row was succesfully changed");
    }



    @DeleteMapping("/{name}/delete")
    public ResponseEntity<String> deleteRow(
                                            @PathVariable
                                            String name) {
        if (table1Repository.deleteByName(name) == 1) {
            return ResponseEntity.ok().body("Row was succesfully deleted");
        } else {
            return ResponseEntity.ok().body("Sorry, an error occurred. Maybe iw was not deleted. Please, check whether deleting has ocurred and if not - try again");
        }
    }

}
