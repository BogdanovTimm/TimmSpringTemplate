package com.example.hibernatetest2.onetomany.integration.repository;

import java.util.ArrayList;

import org.assertj.core.api.Assertions;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import com.example.hibernatetest2.onetomany.integration.util.IntegrationTestBase;
import com.example.hibernatetest2.tables.onetomanytoone.entities.QTable1;
import com.example.hibernatetest2.tables.onetomanytoone.entities.Table1;
import com.example.hibernatetest2.tables.onetomanytoone.repositories.Table1Repository;
import com.querydsl.core.types.ExpressionUtils;
import com.querydsl.core.types.Predicate;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class Table1RepositoryIT extends IntegrationTestBase { //[ ] Don't forget to extend IntegrationTestBase

    //! Don't forget to run Docker on the PC when you do integration tests

    private final Table1Repository table1; //! It will not work if it is not private final

    @org.junit.jupiter.api.Test
    void findAllWithEmptyPredicate() {
        var pageRequest = PageRequest.of(0, 2, Sort.by(Sort.Direction.DESC, "id"));
        var searchPhraseOrNothing = "";
        var listOfBooleanExpressions = new ArrayList<Predicate>(); //! You need QueryDsl dependency for this to work
        String[] arr = searchPhraseOrNothing.split(" "); //! http://website.com/?searchPhrase=me+th parses internally as searchPhrase = "me th"
        for (String currentWord : arr) {
            listOfBooleanExpressions.add(QTable1.table1.name.containsIgnoreCase(currentWord));//[ ] QTable1 is a class generated by QueryDsl. You need to change it to class that represents your table, like QMyTable
        }
        var predicate = ExpressionUtils.anyOf(listOfBooleanExpressions); //? Connects QueryDslPredicate1s with logivcanl OR
        Assertions.assertThat(table1.findAll(predicate, pageRequest)).isNotEmpty();
    }
    
    @org.junit.jupiter.api.Test
    void findAllWithSomePredicate() {
        var pageRequest = PageRequest.of(0, 2, Sort.by(Sort.Direction.DESC, "id"));
        var searchPhraseOrNothing = "th me";
        var listOfBooleanExpressions = new ArrayList<Predicate>(); //! You need QueryDsl dependency for this to work
        String[] arr = searchPhraseOrNothing.split(" "); //! http://website.com/?searchPhrase=me+th parses internally as searchPhrase = "me th"
        for (String currentWord : arr) {
            listOfBooleanExpressions.add(QTable1.table1.name.containsIgnoreCase(currentWord));//[ ] QTable1 is a class generated by QueryDsl. You need to change it to class that represents your table, like QMyTable
        }
        var predicate = ExpressionUtils.anyOf(listOfBooleanExpressions); //? Connects QueryDslPredicate1s with logivcanl OR
        Assertions.assertThat(table1.findAll(predicate, pageRequest)).isNotEmpty();
    }

    @org.junit.jupiter.api.Test
    void ckeckfindById() {
        var rowFromTable1 = table1.findById(1L).get();
        Assertions.assertThat(rowFromTable1)
                  .isEqualTo(Table1.builder()
                                   .id(1L)
                                   .name("acdc@gmail.com")
                                   .build());
        Assertions.assertThat(rowFromTable1.getMapOfTable2s()).isEmpty();
    }

    @org.junit.jupiter.api.Test
    void saveAndFlush() {
        var newRow = Table1.builder()
                           .name("bigben@gmail.com")
                           .build();
        table1.saveAndFlush(newRow);
        var newRowFromDatabase = table1.findById(8L).get();
        Assertions.assertThat(newRowFromDatabase)
                  .isEqualTo(Table1.builder()
                                   .id(8L)
                                   .name("bigben@gmail.com")
                                   .build());
    }

    @org.junit.jupiter.api.Test
    void delete() {
        Assertions.assertThat(table1.deleteByName("acdc@gmail.com")).isEqualTo(1);
        Assertions.assertThat(table1.findById(1L).isEmpty()).isTrue();
    }

}
